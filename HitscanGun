--[[ 
Hitscan Gun Script ClientSide
Made by GoatTatum on RBX / Tincan43 on Discord
Put Weapon Stats in Module Script
]]

---------------------------------------------------------------------------------------Constants--------------------------------------------------------------------------------------------------------------------
local plr = game:GetService("Players").LocalPlayer
local char = plr.Character
local mouse = plr:GetMouse()
local UIS = game:GetService("UserInputService")
local camera = workspace.CurrentCamera
local tool = script.Parent
local firePart = tool:WaitForChild("Main")
local ammoGui = tool.GunInfoGui

local defaultMouse = nil
local reloadTask = nil
local shootTask = nil
local reloadTrack = nil
local recoilTrack = nil
local shootingTrack = nil
local inspectTrack = nil

local RS = game:GetService("ReplicatedStorage")
local gunInfo = require(RS:WaitForChild("GunInfo"))

local events = script:WaitForChild("Events")
local fireEvent = events:WaitForChild("Fire")
local reloadEvent = events:WaitForChild("Reload")

local sounds = script:WaitForChild("Sounds")
local gunshotSound = sounds:WaitForChild("Gunshot")
local reloadSound = sounds:WaitForChild("Reload")
local hit = sounds:WaitForChild("Hit")
local restockSound = sounds:WaitForChild("Restock")

local animations = script:WaitForChild("Animations")
local shootingAnim = animations:WaitForChild("Shooting")
local reloadAnim = animations:WaitForChild("Reload")
local recoilAnim = animations:WaitForChild("Recoil")
local inspectAnim = animations:WaitForChild("Inspect")

local inspecting = false
local inShootingAnim = false
local shooting = false
local equipped = false
local holding = false
local reloading = false
local canRestock = true

local range = gunInfo.GunInfo[tool.Name].Range
local dmg = gunInfo.GunInfo[tool.Name].Damage
local fireRate = 100/gunInfo.GunInfo[tool.Name].Firerate
local accuracy = gunInfo.GunInfo[tool.Name].Accuracy
local magSize = gunInfo.GunInfo[tool.Name].MagSize
local reloadSpeed = gunInfo.GunInfo[tool.Name].ReloadSpeed
local mags = gunInfo.GunInfo[tool.Name].Mags
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------Customizable-------------------------------------------------------------------------------------------------------------------
local reloadKey = Enum.KeyCode.R
local inspectKey = Enum.KeyCode.Y
local mouseIcon = "http://www.roblox.com/asset/?id=9947945465"

local shootingAnimLength = 2
local restockRange = 7
local debugToolsOn = false
local debugLifetime = .1
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


local function VisualizeRay(origin, ray) -- Debug tool to show rays
	local distance = (origin - ray.Position).Magnitude
	local p = Instance.new("Part")
	p.Parent = game.Workspace
	p.Name = "Ray part"
	p.Anchored = true
	p.CanCollide = false
	p.CanQuery = false
	p.CanTouch = false
	p.Size = Vector3.new(0.1, 0.1, distance)
	p.CFrame = CFrame.new(origin, ray.Position)*CFrame.new(0, 0, -distance/2)
	p.Material = Enum.Material.ForceField
	p.BrickColor = BrickColor.new("Lime green")
	p.CastShadow = false
	game:GetService("Debris"):addItem(p, debugLifetime + .1)
end


tool.Equipped:Connect(function() -- Swap icon, handle animations and logic when equipping tool
	defaultMouse = mouse.Icon
	mouse.Icon = mouseIcon
	equipped = true
	ammoGui.Parent = plr.PlayerGui

	if not reloadTrack then  -- Set Tracks
		reloadTrack = tool.Parent.Humanoid.Animator:LoadAnimation(reloadAnim) inspectTrack = tool.Parent.Humanoid.Animator:LoadAnimation(inspectAnim)
		recoilTrack = tool.Parent.Humanoid.Animator:LoadAnimation(recoilAnim) shootingTrack = tool.Parent.Humanoid.Animator:LoadAnimation(shootingAnim) 
	end
end)

tool.Unequipped:Connect(function() -- Stop animations, switch back icon, and handle logic when unequipping
	mouse.Icon = defaultMouse
	equipped = false
	holding = false
	ammoGui.Parent = tool
	if reloadTask then task.cancel(reloadTask) reloadTask = nil reloadTrack:Stop() reloading = false tool.Mag.Transparency = 0 canRestock = true end
	shootingTrack:Stop()
	inspectTrack:Stop()
end)

tool.Deactivated:Connect(function() -- Stop holding when deactivated
	holding = false
end)

local function ShootingTimer() -- Task to keep animation going
	task.wait(shootingAnimLength)
	shootingTrack:Stop()
end

tool.Activated:Connect(function() -- Handles firing
	holding = true
	while holding and equipped and not shooting do
		if reloading then holding = false continue end --  if reloading dont allow firing
		if tool:GetAttribute("Ammo") <= 0 then holding = false continue end -- if out of ammo dont allow firing
		if shootTask then task.cancel(shootTask) end
		inspecting = false
		inspectTrack:Stop()
		shootingTrack:Play()
		shooting = true
		gunshotSound:Play()
		local params = RaycastParams.new() -- Exclude player from ray
		params.FilterDescendantsInstances = plr.Character:GetChildren()
		params.FilterType = Enum.RaycastFilterType.Exclude
		local dir = nil
		local function rayResult(x, y) -- Fire a ray to find target
			local random = Random.new()
			local randomOffset = Vector3.new(random:NextNumber(-(1/accuracy), 1/accuracy), random:NextNumber(-(1/accuracy), 1/accuracy), random:NextNumber(-(1/accuracy), 1/accuracy)) -- Give an offset to the hit position to simulate accuracy

			dir = (mouse.Hit.Position - tool.Main.Position).Unit + randomOffset
			return workspace:Raycast(tool.Main.Position, dir * range, params)
		end
		local ray = rayResult(mouse.X, mouse.Y)
		if debugToolsOn and ray then VisualizeRay(tool.Main.Position, ray) end -- Make a visual simulating the ray for debug purposes if debug tools are on
		local target = nil local pos = nil if ray then target = ray.Instance pos = ray.Position if target.Parent:FindFirstChild("Humanoid") then hit:Play() end end
		recoilTrack:Play()
		fireEvent:FireServer(tool, dmg, dir, tool.Main, target, pos, range, .12) -- Fires an event to the server which damages the target and creates a bullet
		task.wait(fireRate)
		shooting = false
		if not equipped then return end
	end
	shootTask = task.spawn(ShootingTimer)
end)

function Reload()
	local HRP = char.HumanoidRootPart
	local params = OverlapParams.new() params.FilterType = Enum.RaycastFilterType.Exclude params:AddToFilter(char:GetChildren())

	for _,part in workspace:GetPartBoundsInBox(HRP.CFrame, Vector3.new(restockRange,restockRange,restockRange), params) do -- If restock station nearby, restock ammo instead of reload
		if part.Name == "AmmoStation" then
			if part:GetAttribute("AvailableAmmo") > 0 and canRestock then
				if shootTask then task.cancel(shootTask) shootingTrack:Stop() end
				inspecting = false
				inspectTrack:Stop()
				canRestock = false
				restockSound:Play()
				reloadEvent:FireServer(tool, magSize, true, mags, part)
				reloadTask = nil
				reloading = false
				task.wait(1) canRestock = true
				return
			end
		end
	end

	if tool:GetAttribute("Mags") > 0 and tool:GetAttribute("Ammo") < magSize then -- Reload ammo, drop a prop mag to the floor
		if shootTask then task.cancel(shootTask) shootingTrack:Stop() end
		inspecting = false
		inspectTrack:Stop()
		reloadTrack:Play()
		reloadSound:Play()
		reloading = true
		local propMag = tool.Mag:Clone()
		propMag.Anchored = false
		propMag.Parent = workspace
		propMag.CanCollide = true
		game:GetService("Debris"):addItem(propMag, 3)
		tool.Mag.Transparency = 1
		task.wait(reloadSpeed)
		tool.Mag.Transparency = 0
		if not equipped then return end
		reloadEvent:FireServer(tool, magSize, false) -- Fires an event to the server which updates the gun's ammo
		reloadTask = nil
		reloading = false
		task.wait(1) canRestock = true
	end
end

UIS.InputBegan:Connect(function(input, gameProcessed) -- Handle input detection
	if gameProcessed or not equipped then return end
	if input.KeyCode == reloadKey and not reloading then
		reloadTask = task.spawn(Reload)
	elseif input.KeyCode == inspectKey and not reloading and not shooting and not inspecting then
		inspecting = true
		shootingTrack:Stop()
		inspectTrack:Play()
		delay(inspectTrack.Length + 0.1, function() inspecting = false end)	
	end
end)

---------------------------------------------------------------------------------------------End------------------------------------------------------------------------------------------------------------------

--[[
CombatModule Module Script
Holds methods for sword combat
]]

local Combat = {}
Combat.__index = Combat

-- All static variables
local RS = game:GetService("ReplicatedStorage")
local TS = game:GetService("TweenService")
local combatFolder = RS:WaitForChild("Combat")

local anims = combatFolder.Animations

local events = combatFolder.Events
local replicateEvent = events.Replicate
local changeAttEvent = events:WaitForChild("ChangeAtt")
local damageTargetEvent = events:WaitForChild("DamageTarget")
local replicateSoundEvent = events:WaitForChild("ReplicateSound")

local VFX = combatFolder.VFX
local hitVFX = VFX.Hit.Attachment
local parryVFX = VFX.Parry.Attachment

local sounds = combatFolder.Sounds
local parrySound = sounds.Parry
local hitSound = sounds.Hit

local DAMAGED_TIME = .7
local PARRY_STUN_TIME = .5
local PARRY_COOLDOWN = .7
local PARRY_WINDOW = .26
local COMBO_RESET_LENGTH = 2
local ATTACK_COOLDOWN = .4
local DEBUG_LIFETIME = .5
local SWING_TIME = .3
local RANGE = 6

local hitboxSize = Vector3.new(6,6,RANGE)
local hitboxOffset = CFrame.new(0,0,-(RANGE/2))
local debugToolsOn = true

-- Create a box part for debug purposes
function VisualizeBox (origin, size, color)
	local p = Instance.new("Part")
	p.Parent = game.Workspace
	p.Name = "Box Visual"
	p.Anchored = true
	p.CanCollide = false
	p.CanQuery = false
	p.CanTouch = false
	p.Size = size
	p.CFrame = origin
	p.Material = Enum.Material.ForceField
	p.BrickColor = color
	p.CastShadow = false
	game:GetService("Debris"):addItem(p, DEBUG_LIFETIME)
end

function Combat.new(user, damage)
	local self = setmetatable({}, Combat) -- set meta table to allow OOP
	
	-- Store needed variables
	self.User = user 
	self.Character = user.Character
	self.Damage = damage
	
	self.Locked = false
	self.Equipped = false
	
	-- Create a status table for guard clauses and cooldowns
	self.Status = {
		["Combo"] = 1, -- Combos currently not fully implemented
		["LastCombo"] = 0,
		["Blocking"] = false,
		["Parrying"] = false,
		["Action"] = false,
		["Stunned"] = false,
		["Feinting"] = false
	}
	
	self.DamagedTask = nil -- Damage task to allow a "stun" when getting damaged
	
	-- Load animation tracks to the player's character premptively, instead of having to load them every time
	self.BlockTrack = self.Character.Humanoid.Animator:LoadAnimation(anims.Blocking)
	self.ParryTrack = self.Character.Humanoid.Animator:LoadAnimation(anims.Parry)
	self.ParriedTrack = self.Character.Humanoid.Animator:LoadAnimation(anims.Parried)
	self.AttackTrack = self.Character.Humanoid.Animator:LoadAnimation(anims:WaitForChild("Swing"))
	
	return self
end

function Combat:Equip()
	self.Equipped = true -- Allow tool use when equipped
end

function Combat:Unequip()
	self.Equipped = false -- Disallow tool use when unequipped
end

function Combat:M1()
	if self.Locked or not self.Equipped or self.Status.Action or self.Status.Stunned then return end
	self.Status.Action = true -- Set action to true to not allow any other actions
	
	-- Combo logic for future use, not fully implemented
	if time() - self.Status.LastCombo > COMBO_RESET_LENGTH then
		self.Status.Combo = 1
		ATTACK_COOLDOWN = .4
	end
	
	self.Status.LastCombo = time()
	
	if self.Status.Combo == 5 then
		self.Status.Combo = 1
	end
	
	self.Status.Combo = self.Status.Combo + 1
	
	self.ParryTrack:Stop()
	
	local hum = self.Character.Humanoid
	self.AttackTrack:Play() -- Play the swing animation
	
	task.wait(SWING_TIME) -- Wait to start hit detection, matches with animation and gives opponent time to react with parry
	
	-- If feinting, do not go through with the hit detection and stop animation mid way
	if self.Status.Feinting then
		self.AttackTrack:Stop()
		task.wait(.2) -- Wait some time before allowing another attack/action
		self.Status.Action = false
		self.Status.Feinting = false
		return -- Return to break out of the function and stop attacking, as a feint should
	end
	
	-- Exclude own player from hit detection with OverlapParams
	local params = OverlapParams.new()
	params.FilterDescendantsInstances = self.Character:GetChildren() -- Add all character parts to the overlap parameters
	params.FilterType = Enum.RaycastFilterType.Exclude -- Set to exclude, making any query using these params skip over character parts
	
	local hitbox = workspace:GetPartBoundsInBox(self.Character.HumanoidRootPart.CFrame * hitboxOffset, hitboxSize, params) -- Spatial query to detect parts in the set hitbox range
	if debugToolsOn then VisualizeBox(self.Character.HumanoidRootPart.CFrame * hitboxOffset, hitboxSize, BrickColor.new("Really red")) end
	
	local alreadyHit = {} -- Create a table of what opponents have already been hit to only allow one hit per swing
	
	for _,part in hitbox do
		
		-- Guard clause to figure out if detected part is a damageable opponent
		if not part:FindFirstAncestorOfClass("Model") or not part.Parent:FindFirstChild("Humanoid") or table.find(alreadyHit, part:FindFirstAncestorOfClass("Model")) then continue end
		if not part:FindFirstAncestorOfClass("Model"):GetAttribute("Damageable") then continue end -- Make sure the hitpart is part of a model that is damageable
		
		-- Parry if enemy's parry window is open, block if enemy is blocking
		if part:FindFirstAncestorOfClass("Model"):GetAttribute("Parrying") == true then
			
			self:Parried(hum, self.AttackTrack) -- If enemy parry window is open, get parried
			table.insert(alreadyHit, part:FindFirstAncestorOfClass("Model")) -- Insert the enemy to the table to not allow double or more hits
			continue -- Move on to the next part as this one has already been found and parried
			
		elseif part:FindFirstAncestorOfClass("Model"):GetAttribute("Blocking") == true then -- If the player is blocking but NOT parrying initiate a block
			local target = part:FindFirstAncestorOfClass("Model")
			changeAttEvent:FireServer(target, "Posture", target:GetAttribute("Posture") + 30) -- Add posture to the player on the server as a penalty for getting parried
			table.insert(alreadyHit, target) -- Insert the enemy to the table to not allow double or more hits
			continue -- Move on to the next part as this one has already been found and has blocked
		end
		
		-- If the player has not been stunned and the opponent is not blocking/parrying, Go through with damaging the opponent
		local target = part:FindFirstAncestorOfClass("Model")
		if not self.Status.Stunned then 
			damageTargetEvent:FireServer(target.Humanoid, self.Damage) -- Send the damage to the server
			ReplicateVFX(target.HumanoidRootPart, hitVFX, 1, 1)  -- Send VFX to all clients to reduce server load
			ReplicateSound(hitSound, target.HumanoidRootPart, 1) -- Send sound to all clients to reduce server load
		end
		table.insert(alreadyHit, target) -- Make sure to put the hit enemy in the already hit table to avoid hitting the same enemy twice
		continue -- Move on to the next part as this one has already been found and has been damaged
	end
	
	-- Allow actions again after cooldown
	task.wait(ATTACK_COOLDOWN)
	self.Status.Action = false
end

-- Start Block and parry if possible
function Combat:StartBlock()
	if self.Locked or not self.Equipped or self.Status.Action or self.Status.Blocking then return end -- Guard clause, if not doing any other actions/states, continue with the block
	self.Status.Blocking = true
	self.Status.Action = true
	
	if not self.Status.Parrying then -- If we can Parry then, do this first before blocking
		self.Status.Parrying = true
		changeAttEvent:FireServer(self.Character, "Parrying", true) -- Changes player's character to parrying during the parry window
		self.ParryTrack:Play() -- Play the parry animation
		task.wait(PARRY_WINDOW) -- Wait for how long the set parry window is
		changeAttEvent:FireServer(self.Character, "Parrying", false) -- Change player's parrying status to false after parry window closes
		task.delay(PARRY_COOLDOWN, function() self.Status.Parrying = false end) -- Allow character to parry againa after the cooldown time, use delay as to not stop the rest of the logic (blocking)
	end
	
	-- If after the parry/parry not available and block is still held, change character blocking status to true
	if not self.Status.Blocking then return end
	changeAttEvent:FireServer(self.Character, "Blocking", true)
	self.BlockTrack:Play() -- Play the block animation
end

-- Stop blocking when block key is let go of
function Combat:EndBlock()
	self.Status.Action = false -- Turn action and blocking to false to allow further actions
	self.Status.Blocking = false
	changeAttEvent:FireServer(self.Character, "Blocking", false) -- Stop character blocking status
	self.BlockTrack:Stop() -- Stop the block animation
end

-- When damaged, stun the player
function Combat:Damaged()
	if damagedTask then task.cancel(damagedTask) end -- If already in the damage "stun", cancel it to restart the damage "stun" timer
	local function DamagedLogic()
		self.Status.Stunned = true -- Set stun status to true to not allow action or damaging enemies during this time
		task.wait(DAMAGED_TIME) -- Wait the set damage stun time
		self.Status.Stunned = false -- End the stun and allow action again
	end
	
	damagedTask = task.spawn(DamagedLogic) -- Spawns the task so that if the player is damaged again while this is still going, the damaged task will be cancelled and the damaged time will reset
end

function Combat:StartFeint()
	self.Status.Feinting = true -- Set feinting to true, which will stop attacks mid way
end

function Combat:EndFeint()
	self.Status.Feinting = false -- Set feinting to false, go back to normal attack logic
end

function Combat:Lock()
	self.Locked = true
end

-- Destroy function for optimization
function Combat:Destroy()
	setmetatable(self, nil) -- clear the metatable ref
	table.clear(self) -- clear self
	table.freeze(self) -- freeze self
end

-- Logic for when player hits a parrying target
function Combat:Parried(hum, attackTrack)
	
	attackTrack:Stop() -- Stop the swinging animation
	self.ParriedTrack:Play() -- Play the parry animation
	
	if damagedTask then task.cancel(damagedTask) end -- End the "stun" gained from getting hit to replace it with a new parry stun
	self.Status.Stunned = false
	
	-- Give posture penalty, create VFX and sound effects and replicate to all clients
	changeAttEvent:FireServer(self.Character, "Posture", self.Character:GetAttribute("Posture") + 20) -- Add posture to the player on the server as a penalty for getting parried
	local target = self.Character:FindFirstChildOfClass("Tool").Handle -- Set the spawn point of the vfx to the players tool handle
	
	ReplicateVFX(target, parryVFX, 1, 1) -- Send VFX to all clients to reduce server load
	ReplicateSound(parrySound, self.Character.HumanoidRootPart, 1) -- Send sound to all clients to reduce server load

	-- Do not allow any combat for .5 after getting parried
	self.Locked = true -- Set self.Locked to true to not allow any actions shortly after getting parried
	task.wait(PARRY_STUN_TIME) -- Wait a set "stun" time
	self.Locked = false -- Set back to false to allow actions again
end

function ReplicateVFX(target, part, emit, life)
	local replicateArgs = {
		["Target"] = target,
		["Part"] = part,
		["EmitAmount"] = emit,
		["Lifetime"] = life
	}
	replicateEvent:FireServer(replicateArgs) -- Send this to the server which fires all the clients to create the VFX to reduce server load
end

function ReplicateSound(sound, target, life)

	local replicateArgs = {
		["Sound"] = sound,
		["Target"] = target,
		["Lifetime"] = life
	}

	replicateSoundEvent:FireServer(replicateArgs) -- Send this to the server which fires all the clients to create the sound to reduce server load
end

return table.freeze(Combat)
